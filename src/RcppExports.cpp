// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimateGammaBC3
NumericVector estimateGammaBC3(NumericVector y);
RcppExport SEXP _RandomForest2_estimateGammaBC3(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(estimateGammaBC3(y));
    return rcpp_result_gen;
END_RCPP
}
// simulateDist
NumericMatrix simulateDist(int n, NumericMatrix prediction, String distribution);
RcppExport SEXP _RandomForest2_simulateDist(SEXP nSEXP, SEXP predictionSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prediction(predictionSEXP);
    Rcpp::traits::input_parameter< String >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateDist(n, prediction, distribution));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RandomForest2_estimateGammaBC3", (DL_FUNC) &_RandomForest2_estimateGammaBC3, 1},
    {"_RandomForest2_simulateDist", (DL_FUNC) &_RandomForest2_simulateDist, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_RandomForest2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
